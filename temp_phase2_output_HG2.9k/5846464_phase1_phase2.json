{
  "python_version": {
    "min": "3.4",
    "max": "3.7",
    "evidence": [
      "pathlib.Path added in Python 3.4 \u2192 min Python 3.4",
      "time.clock removed in Python 3.8 \u2192 max Python 3.7"
    ],
    "notes": ""
  },
  "dependencies": {
    "sqlalchemy": {
      "inferred_version_range": ">=1.2.0,<2.0.0",
      "recommended_requirements_line": "sqlalchemy>=1.2.0,<2.0.0",
      "evidence": [
        "sqlalchemy.create_engine(), sqlalchemy.MetaData(), sqlalchemy.Table(), sqlalchemy.Column(), sqlalchemy.Integer()"
      ],
      "confidence": 1.0,
      "notes": ""
    },
    "DB_CONFIG_DICT": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "DB_CONFIG_DICT['user']",
        "DB_CONFIG_DICT['password']",
        "DB_CONFIG_DICT['host']",
        "DB_CONFIG_DICT['port']",
        "DB_CONFIG_DICT['database']"
      ],
      "confidence": 0.5,
      "notes": "Assuming all fields are present in the dictionary."
    },
    "DB_CONN_FORMAT": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "DB_CONN_FORMAT.format(database='postgres')"
      ],
      "confidence": 0.5,
      "notes": "Assuming the format string is a constant."
    },
    "engine_default": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "create_engine(DB_CONN_URI_DEFAULT)",
        "engine_default.connect()"
      ],
      "confidence": 0.5,
      "notes": "Assuming the URI is a constant."
    },
    "NEW_DB_NAME": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "NEW_DB_NAME",
        "DB_CONN_URI_NEW"
      ],
      "confidence": 0.5,
      "notes": "Assuming the name is a constant."
    },
    "metadata": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "sqlalchemy.MetaData()"
      ],
      "confidence": 0.5,
      "notes": "Assuming the MetaData is a constant."
    },
    "proj": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "Table('test', metadata, Column('id', Integer))"
      ],
      "confidence": 0.5,
      "notes": "Assuming the Table and Column are constants."
    },
    "setup_module": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "setup_module()"
      ],
      "confidence": 0.5,
      "notes": "Assuming the module is a constant."
    },
    "test_create_table": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "test_create_table()"
      ],
      "confidence": 0.5,
      "notes": "Assuming the function is a constant."
    },
    "teardown_module": {
      "inferred_version_range": null,
      "recommended_requirements_line": null,
      "evidence": [
        "teardown_module()"
      ],
      "confidence": 0.5,
      "notes": "Assuming the module is a constant."
    }
  },
  "requirements.txt": []
}