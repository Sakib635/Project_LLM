{
  "raw_text": "System Prompt:\nYou are an expert dependency/version and Python version inference assistant.\nYou must output ONLY valid JSON \u2014 no markdown, no code fences, no explanations, no comments.\nOutput must strictly match the JSON structure below and be human-readable formatted with 2 spaces of indentation.\n\nGiven a structured list of extracted API calls grouped by package and standard library (Python stdlib),\ninfer:\n1. The Python version range (min, max) based on the extracted APIs provided.\n2. The most likely version range for each external package used based on the extracted APIs provided.\n3. requirements.txt (only third-party packages' recommended_requirements_line).\n\nRequirements for Python version:\n- Return:\n  - min (minimum Python version required)\n  - max (maximum Python version allowed, null if none)\n  - evidence (list of short statements linking stdlib API usage to Python version addition/removal)\n  - notes (optional assumptions)\nRequirements for external packages:\n- For each package, return:\n  - inferred_version_range (string, e.g., \">=1.2.0,<2.0.0\") or null,\n  - recommended_requirements_line (string, e.g., \"pandas>=1.2.0,<2.0.0\") or null,\n  - evidence (list of short statements mapping APIs to introduction/deprecation versions),\n  - confidence (0.0\u20131.0),\n  - notes (optional: conflicting APIs, assumptions, uncertain items)\n\nAdditional field:\n- requirements.txt: a list of recommended_requirements_line for all dependencies\n\nGeneral rules:\n- If you cannot determine a reliable upper or lower bound, indicate null and explain.\n- Prefer conservative ranges to ensure the project runs safely.\n- Output **only** valid JSON following the schema below.\n\nUser Prompt:\nextracted APIs: {\n  \"requests\": [\n    \"requests.get\"\n  ]\n}\n\nReturn ONLY the final JSON object \u2014 no markdown, no extra text.\nStructure:\n{\n  \"python_version\": {\n    \"min\": \"y\",\n    \"max\": \"x\",\n    \"evidence\": [\"pathlib.Path added in Python y \u2192 min Python y\", \"time.clock removed in Python x\u2192 max Python z\"],\n    \"notes\": \"\"\n  },\n  \"dependencies\": {\n    \"<package>\": {\n      \"inferred_version_range\": \">=X.Y.Z,<A.B.C\" or null,\n      \"recommended_requirements_line\": \"pkg>=X.Y.Z,<A.B.C\" or null,\n      \"evidence\": [\"API X introduced, depricated, removed or changed in vM.N.P\"],\n      \"confidence\": 0.0,\n      \"notes\": \"\"\n    }\n  },\n  \"requirements.txt\": [ \"pkg>=X.Y.Z,<A.B.C\" ]\n}\n```\n{\n  \"python_version\": {\n    \"min\": \"3.6\",\n    \"max\": null,\n    \"evidence\": [\"urllib.parse added in Python 3.0 \u2192 min Python 3.0\"],\n    \"notes\": \"\"\n  },\n  \"dependencies\": {\n    \"requests\": {\n      \"inferred_version_range\": \">=2.7.0,<3.0.0\",\n      \"recommended_requirements_line\": \"requests>=2.7.0,<3.0.0\",\n      \"evidence\": [\"requests.get introduced in version 2.0.0\"],\n      \"confidence\": 1.0,\n      \"notes\": \"\"\n    }\n  },\n  \"requirements.txt\": [\n    \"requests>=2.7.0,<3.0.0\"\n  ]\n}\n```",
  "error": "Invalid JSON structure",
  "requirements.txt": [
    "requests>=2.7.0,<3.0.0"
  ]
}